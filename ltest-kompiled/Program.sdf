module Program

imports Common
imports KBuiltinsBasic
exports

context-free syntax
context-free priorities
{
    Int -> AExp {}
    Id -> AExp {}
} > {
    AExp "/" AExp -> AExp {left, cons("AExp1528Syn")}
    AExp "*" AExp -> AExp {left, cons("AExp1448Syn")}
} > {
    AExp "+" AExp -> AExp {left, cons("AExp165Syn")}
    AExp "-" AExp -> AExp {left, cons("AExp137Syn")}
}

context-free start-symbols
DzString DzBool AExp AExps Stmts BExp String Int Stmt Float Bool Block Id DzInt DzFloat K
context-free syntax
    "print" "(" InsertDzAExp ")" ";" -> Stmt {cons("Stmt12Syn")}
    DzString -> String {}
    {Stmt ""}* -> Stmts {cons("Stmts1ListSyn")}
    AExp ">" AExp -> BExp {cons("BExp167Syn")}
    AExp "==" AExp -> BExp {cons("BExp16Syn")}
    "while" "(" InsertDzBExp ")" Block -> Stmt {cons("Stmt1436Syn")}
    Id "=" InsertDzBExp ";" -> Stmt {cons("Stmt168Syn")}
    "(" InsertDzAExp ")" -> AExp {cons("AExp1Bracket")}
    DzInt -> Int {}
    DzFloat -> Float {}
    Id "=" InsertDzAExp ";" -> Stmt {cons("Stmt1386Syn")}
    "{" "}" -> Block {cons("Block1493Syn")}
    AExp "<" AExp -> BExp {cons("BExp1242Syn")}
    DzBool -> Bool {}
    AExp ">=" AExp -> BExp {cons("BExp1456Syn")}
    "{" InsertDzStmts "}" -> Block {cons("Block1459Syn")}
    Bool -> BExp {}
    Block -> Stmt {}
    "read" "(" ")" -> AExp {cons("AExp1508Syn")}
    {AExp ","}* -> AExps {cons("AExps1ListSyn")}
    AExp "<=" AExp -> BExp {cons("BExp1525Syn")}
    "if" "(" InsertDzBExp ")" InsertDzBlock "else" Block -> Stmt {cons("Stmt1526Syn")}
    AExp ";" -> Stmt {cons("Stmt1277Syn")}
    BExp "?" InsertDzAExp ":" AExp -> Stmt {cons("Stmt1328Syn")}
    "(" InsertDzBExp ")" -> BExp {cons("BExp1Bracket")}
    AExp -> InsertDzAExp
    Stmts -> InsertDzStmts
    BExp -> InsertDzBExp
    Block -> InsertDzBlock


    DzDzString        -> DzString    {cons("DzString1Const")}
    DzDzBool        -> DzBool    {cons("DzBool1Const")}
    DzDzInt        -> DzInt    {cons("DzInt1Const")}
    DzDzId        -> DzId    {cons("DzId1Const")}
    DzDzFloat        -> DzFloat    {cons("DzFloat1Const")}



%% start symbols subsorts
    KItem        -> K
    DzString        -> K
    DzBool        -> K
    AExp        -> K
    BExp        -> K
    String        -> K
    Int        -> K
    Stmt        -> K
    Float        -> K
    Bool        -> K
    Block        -> K
    Id        -> K
    DzInt        -> K
    DzFloat        -> K
lexical syntax
    "Infinity" -> DzDzFloat
    "true" -> DzDzBool
    "false" -> DzDzBool
    "NaN" -> DzDzFloat


    "while" -> IdDz {reject}
    "else" -> IdDz {reject}
    "NaN" -> IdDz {reject}
    "if" -> IdDz {reject}
    "read" -> IdDz {reject}
    "Infinity" -> IdDz {reject}
    "false" -> IdDz {reject}
    "print" -> IdDz {reject}
    "true" -> IdDz {reject}

lexical restrictions
    %% follow restrictions


lexical syntax
    [A-Za-z\_][A-Za-z0-9\_]* -> IdDz
    "while" -> IdDz {reject}
    "else" -> IdDz {reject}
    "NaN" -> IdDz {reject}
    "if" -> IdDz {reject}
    "read" -> IdDz {reject}
    "Infinity" -> IdDz {reject}
    "false" -> IdDz {reject}
    "print" -> IdDz {reject}
    "true" -> IdDz {reject}
    [\-\+]? [0-9]+ -> DzIntDz
    [\+\-]?[0-9]+"."[0-9]+([eE][\+\-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    [\+\-]?"Infinity"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "Infinity" -> DzFloatDz {reject}
    "NaN"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "NaN" -> DzFloatDz {reject}
    "\"" ((~[\"\n\r\\]) | (((([\\][nrtf\"\\]) | ([\\][x][0-9a-fA-F][0-9a-fA-F])) | ([\\][u][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])) | ([\\][U][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])))* "\"" -> DzStringDz
context-free syntax
    DzStringDz -> DzString {cons("DzString1Const")}
    IdDz -> Id {cons("Id1Const")}
    DzIntDz -> DzInt {cons("DzInt1Const")}
    DzFloatDz -> DzFloat {cons("DzFloat1Const")}


context-free restrictions
    Id -/- [A-Za-z0-9\_]
    DzInt -/-  [0-9]
