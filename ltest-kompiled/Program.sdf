module Program

imports Common
imports KBuiltinsBasic
exports

context-free syntax
context-free priorities
{
    Int -> Exp1 {}
    Id -> Exp1 {}
} > {
    Exp1 "/" Exp1 -> Exp1 {left, cons("Exp11442Syn")}
    Exp1 "*" Exp1 -> Exp1 {left, cons("Exp11443Syn")}
} > {
    Exp1 "+" Exp1 -> Exp1 {left, cons("Exp11444Syn")}
    Exp1 "-" Exp1 -> Exp1 {left, cons("Exp11445Syn")}
}

context-free start-symbols
DzString DzBool Stmts String Int Stmt Float Exp2 Bool Exp1 Block Id Exp1s DzInt DzFloat K
context-free syntax
    DzInt -> Int {}
    Exp2 "?" InsertDzExp1 ":" Exp1 -> Stmt {cons("Stmt1458Syn")}
    Exp1 ">" Exp1 -> Exp2 {cons("Exp21449Syn")}
    Exp1 "<" Exp1 -> Exp2 {cons("Exp21448Syn")}
    DzBool -> Bool {}
    {Stmt ""}* -> Stmts {cons("Stmts1ListSyn")}
    Exp1 "<=" Exp1 -> Exp2 {cons("Exp21446Syn")}
    "print" "(" InsertDzExp1 ")" ";" -> Stmt {cons("Stmt1457Syn")}
    Bool -> Exp2 {}
    Exp1 ">=" Exp1 -> Exp2 {cons("Exp21447Syn")}
    "if" "(" InsertDzExp2 ")" InsertDzBlock "else" Block -> Stmt {cons("Stmt1455Syn")}
    DzFloat -> Float {}
    Id "=" InsertDzExp1 ";" -> Stmt {cons("Stmt1459Syn")}
    Block -> Stmt {}
    DzString -> String {}
    "{" InsertDzStmts "}" -> Block {cons("Block1453Syn")}
    "read" "(" ")" -> Exp1 {cons("Exp11440Syn")}
    "{" "}" -> Block {cons("Block1452Syn")}
    "while" "(" InsertDzExp2 ")" Block -> Stmt {cons("Stmt1456Syn")}
    Id "=" InsertDzExp2 ";" -> Stmt {cons("Stmt1460Syn")}
    "(" InsertDzExp2 ")" -> Exp2 {cons("Exp21Bracket")}
    {Exp1 ","}* -> Exp1s {cons("Exp1s1ListSyn")}
    "(" InsertDzExp1 ")" -> Exp1 {cons("Exp11Bracket")}
    Exp1 "==" Exp1 -> Exp2 {cons("Exp21450Syn")}
    Exp1 ";" -> Stmt {cons("Stmt1454Syn")}
    Stmts -> InsertDzStmts
    Exp2 -> InsertDzExp2
    Exp1 -> InsertDzExp1
    Block -> InsertDzBlock


    DzDzString        -> DzString    {cons("DzString1Const")}
    DzDzBool        -> DzBool    {cons("DzBool1Const")}
    DzDzInt        -> DzInt    {cons("DzInt1Const")}
    DzDzId        -> DzId    {cons("DzId1Const")}
    DzDzFloat        -> DzFloat    {cons("DzFloat1Const")}



%% start symbols subsorts
    KItem        -> K
    DzString        -> K
    DzBool        -> K
    String        -> K
    Int        -> K
    Stmt        -> K
    Float        -> K
    Exp2        -> K
    Bool        -> K
    Exp1        -> K
    Block        -> K
    Id        -> K
    DzInt        -> K
    DzFloat        -> K
lexical syntax
    "false" -> DzDzBool
    "true" -> DzDzBool


    "while" -> IdDz {reject}
    "else" -> IdDz {reject}
    "if" -> IdDz {reject}
    "read" -> IdDz {reject}
    "false" -> IdDz {reject}
    "print" -> IdDz {reject}
    "true" -> IdDz {reject}

lexical restrictions
    %% follow restrictions


lexical syntax
    [A-Za-z\_][A-Za-z0-9\_]* -> IdDz
    [\-\+]?[0-9]+ -> DzIntDz
    [\+\-]?[0-9]+"."[0-9]+([eE][\+\-]?[0-9]+)?[fFdD]? -> DzFloatDz
    "\"" ((~[\"\n\r\\])|(((([\\][nrtf\"\\])|([\\][x][0-9a-fA-F][0-9a-fA-F]))|([\\][u][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]))|([\\][U][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])))*"\"" -> DzStringDz
    "<=" -> DzStringDz {reject}
    "while" -> DzStringDz {reject}
    "else" -> DzStringDz {reject}
    "if" -> DzStringDz {reject}
    "==" -> DzStringDz {reject}
    "read" -> DzStringDz {reject}
    "false" -> DzStringDz {reject}
    "(" -> DzStringDz {reject}
    ")" -> DzStringDz {reject}
    "*" -> DzStringDz {reject}
    "+" -> DzStringDz {reject}
    "," -> DzStringDz {reject}
    "-" -> DzStringDz {reject}
    "/" -> DzStringDz {reject}
    "print" -> DzStringDz {reject}
    "true" -> DzStringDz {reject}
    ":" -> DzStringDz {reject}
    "{" -> DzStringDz {reject}
    ";" -> DzStringDz {reject}
    "<" -> DzStringDz {reject}
    "}" -> DzStringDz {reject}
    "=" -> DzStringDz {reject}
    ">" -> DzStringDz {reject}
    ">=" -> DzStringDz {reject}
    "?" -> DzStringDz {reject}
    "<=" -> IdDz {reject}
    "while" -> IdDz {reject}
    "else" -> IdDz {reject}
    "if" -> IdDz {reject}
    "==" -> IdDz {reject}
    "read" -> IdDz {reject}
    "false" -> IdDz {reject}
    "(" -> IdDz {reject}
    ")" -> IdDz {reject}
    "*" -> IdDz {reject}
    "+" -> IdDz {reject}
    "," -> IdDz {reject}
    "-" -> IdDz {reject}
    "/" -> IdDz {reject}
    "print" -> IdDz {reject}
    "true" -> IdDz {reject}
    ":" -> IdDz {reject}
    "{" -> IdDz {reject}
    ";" -> IdDz {reject}
    "<" -> IdDz {reject}
    "}" -> IdDz {reject}
    "=" -> IdDz {reject}
    ">" -> IdDz {reject}
    ">=" -> IdDz {reject}
    "?" -> IdDz {reject}
    "<=" -> DzIntDz {reject}
    "while" -> DzIntDz {reject}
    "else" -> DzIntDz {reject}
    "if" -> DzIntDz {reject}
    "==" -> DzIntDz {reject}
    "read" -> DzIntDz {reject}
    "false" -> DzIntDz {reject}
    "(" -> DzIntDz {reject}
    ")" -> DzIntDz {reject}
    "*" -> DzIntDz {reject}
    "+" -> DzIntDz {reject}
    "," -> DzIntDz {reject}
    "-" -> DzIntDz {reject}
    "/" -> DzIntDz {reject}
    "print" -> DzIntDz {reject}
    "true" -> DzIntDz {reject}
    ":" -> DzIntDz {reject}
    "{" -> DzIntDz {reject}
    ";" -> DzIntDz {reject}
    "<" -> DzIntDz {reject}
    "}" -> DzIntDz {reject}
    "=" -> DzIntDz {reject}
    ">" -> DzIntDz {reject}
    ">=" -> DzIntDz {reject}
    "?" -> DzIntDz {reject}
    "<=" -> DzFloatDz {reject}
    "while" -> DzFloatDz {reject}
    "else" -> DzFloatDz {reject}
    "if" -> DzFloatDz {reject}
    "==" -> DzFloatDz {reject}
    "read" -> DzFloatDz {reject}
    "false" -> DzFloatDz {reject}
    "(" -> DzFloatDz {reject}
    ")" -> DzFloatDz {reject}
    "*" -> DzFloatDz {reject}
    "+" -> DzFloatDz {reject}
    "," -> DzFloatDz {reject}
    "-" -> DzFloatDz {reject}
    "/" -> DzFloatDz {reject}
    "print" -> DzFloatDz {reject}
    "true" -> DzFloatDz {reject}
    ":" -> DzFloatDz {reject}
    "{" -> DzFloatDz {reject}
    ";" -> DzFloatDz {reject}
    "<" -> DzFloatDz {reject}
    "}" -> DzFloatDz {reject}
    "=" -> DzFloatDz {reject}
    ">" -> DzFloatDz {reject}
    ">=" -> DzFloatDz {reject}
    "?" -> DzFloatDz {reject}
context-free syntax
    DzStringDz -> DzString {cons("DzString1Const")}
    IdDz -> Id {cons("Id1Const")}
    DzIntDz -> DzInt {cons("DzInt1Const")}
    DzFloatDz -> DzFloat {cons("DzFloat1Const")}


context-free restrictions
    Id -/- [A-Za-z0-9\_]
    DzInt -/- [0-9]
