module Program

imports Common
imports KBuiltinsBasic
exports

context-free syntax
context-free priorities
{
    Int -> Exp1 {}
    Id -> Exp1 {}
} > {
    Exp1 "/" Exp1 -> Exp1 {left, cons("Exp11380Syn")}
    Exp1 "*" Exp1 -> Exp1 {left, cons("Exp11258Syn")}
} > {
    Exp1 "+" Exp1 -> Exp1 {left, cons("Exp11204Syn")}
    Exp1 "-" Exp1 -> Exp1 {left, cons("Exp11402Syn")}
}

context-free start-symbols
DzString DzBool Stmts String Int Stmt Float Exp2 Bool Exp1 Block Id Exp1s DzInt DzFloat K
context-free syntax
    Exp2 "?" InsertDzExp1 ":" Exp1 -> Stmt {cons("Stmt13Syn")}
    Id "=" InsertDzExp1 ";" -> Stmt {cons("Stmt165Syn")}
    DzString -> String {}
    {Stmt ""}* -> Stmts {cons("Stmts1ListSyn")}
    Exp1 "<" Exp1 -> Exp2 {cons("Exp21443Syn")}
    DzInt -> Int {}
    "(" InsertDzExp2 ")" -> Exp2 {cons("Exp21Bracket")}
    Exp1 ">=" Exp1 -> Exp2 {cons("Exp21288Syn")}
    "print" "(" InsertDzExp1 ")" ";" -> Stmt {cons("Stmt1340Syn")}
    Exp1 "==" Exp1 -> Exp2 {cons("Exp2124Syn")}
    DzFloat -> Float {}
    "while" "(" InsertDzExp2 ")" Block -> Stmt {cons("Stmt1292Syn")}
    "{" "}" -> Block {cons("Block1496Syn")}
    {Exp1 ","}* -> Exp1s {cons("Exp1s1ListSyn")}
    DzBool -> Bool {}
    "{" InsertDzStmts "}" -> Block {cons("Block1462Syn")}
    "read" "(" ")" -> Exp1 {cons("Exp11400Syn")}
    Block -> Stmt {}
    Exp1 ">" Exp1 -> Exp2 {cons("Exp2188Syn")}
    Bool -> Exp2 {}
    Id "=" InsertDzExp2 ";" -> Stmt {cons("Stmt1466Syn")}
    Exp1 ";" -> Stmt {cons("Stmt152Syn")}
    "if" "(" InsertDzExp2 ")" InsertDzBlock "else" Block -> Stmt {cons("Stmt1522Syn")}
    Exp1 "<=" Exp1 -> Exp2 {cons("Exp21324Syn")}
    "(" InsertDzExp1 ")" -> Exp1 {cons("Exp11Bracket")}
    Stmts -> InsertDzStmts
    Exp2 -> InsertDzExp2
    Exp1 -> InsertDzExp1
    Block -> InsertDzBlock


    DzDzString        -> DzString    {cons("DzString1Const")}
    DzDzBool        -> DzBool    {cons("DzBool1Const")}
    DzDzInt        -> DzInt    {cons("DzInt1Const")}
    DzDzId        -> DzId    {cons("DzId1Const")}
    DzDzFloat        -> DzFloat    {cons("DzFloat1Const")}



%% start symbols subsorts
    KItem        -> K
    DzString        -> K
    DzBool        -> K
    String        -> K
    Int        -> K
    Stmt        -> K
    Float        -> K
    Exp2        -> K
    Bool        -> K
    Exp1        -> K
    Block        -> K
    Id        -> K
    DzInt        -> K
    DzFloat        -> K
lexical syntax
    "Infinity" -> DzDzFloat
    "true" -> DzDzBool
    "false" -> DzDzBool
    "NaN" -> DzDzFloat


    "while" -> IdDz {reject}
    "else" -> IdDz {reject}
    "NaN" -> IdDz {reject}
    "if" -> IdDz {reject}
    "read" -> IdDz {reject}
    "Infinity" -> IdDz {reject}
    "false" -> IdDz {reject}
    "print" -> IdDz {reject}
    "true" -> IdDz {reject}

lexical restrictions
    %% follow restrictions


lexical syntax
    [A-Za-z\_][A-Za-z0-9\_]* -> IdDz
    "while" -> IdDz {reject}
    "else" -> IdDz {reject}
    "NaN" -> IdDz {reject}
    "if" -> IdDz {reject}
    "read" -> IdDz {reject}
    "Infinity" -> IdDz {reject}
    "false" -> IdDz {reject}
    "print" -> IdDz {reject}
    "true" -> IdDz {reject}
    [\-\+]? [0-9]+ -> DzIntDz
    [\+\-]?[0-9]+"."[0-9]+([eE][\+\-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    [\+\-]?"Infinity"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "Infinity" -> DzFloatDz {reject}
    "NaN"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "NaN" -> DzFloatDz {reject}
    "\"" ((~[\"\n\r\\]) | (((([\\][nrtf\"\\]) | ([\\][x][0-9a-fA-F][0-9a-fA-F])) | ([\\][u][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])) | ([\\][U][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])))* "\"" -> DzStringDz
context-free syntax
    DzStringDz -> DzString {cons("DzString1Const")}
    IdDz -> Id {cons("Id1Const")}
    DzIntDz -> DzInt {cons("DzInt1Const")}
    DzFloatDz -> DzFloat {cons("DzFloat1Const")}


context-free restrictions
    Id -/- [A-Za-z0-9\_]
    DzInt -/-  [0-9]
